// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(username, email, hashed_password, name)
VALUES ($1,$2,$3,$4)
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Name           string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.Name,
	)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const decrementFollower = `-- name: DecrementFollower :one
UPDATE users SET
followers_count = followers_count - 1
WHERE username = $1
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

func (q *Queries) DecrementFollower(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, decrementFollower, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const decrementFollowing = `-- name: DecrementFollowing :one
UPDATE users SET
following_count = following_count - 1
WHERE username = $1
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

func (q *Queries) DecrementFollowing(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, decrementFollowing, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const incrementFollower = `-- name: IncrementFollower :one
UPDATE users SET
followers_count = followers_count + 1
WHERE username = $1
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

func (q *Queries) IncrementFollower(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, incrementFollower, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const incrementFollowing = `-- name: IncrementFollowing :one
UPDATE users SET
following_count = following_count + 1
WHERE username = $1
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

func (q *Queries) IncrementFollowing(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, incrementFollowing, username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE users SET 
email = $1
WHERE username = $2
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

type UpdateEmailParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.Email, arg.Username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateName = `-- name: UpdateName :one
UPDATE users SET
name = $1
WHERE username = $2
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

type UpdateNameParams struct {
	Name     string `json:"name"`
	Username string `json:"username"`
}

func (q *Queries) UpdateName(ctx context.Context, arg UpdateNameParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateName, arg.Name, arg.Username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users SET
hashed_password = $1
WHERE username = $2
RETURNING username, email, hashed_password, name, followers_count, following_count, changed_password_at, created_at
`

type UpdatePasswordParams struct {
	HashedPassword string `json:"hashed_password"`
	Username       string `json:"username"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.HashedPassword, arg.Username)
	var i Users
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Name,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.ChangedPasswordAt,
		&i.CreatedAt,
	)
	return i, err
}
