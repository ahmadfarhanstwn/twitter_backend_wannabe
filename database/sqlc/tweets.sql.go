// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tweets.sql

package database

import (
	"context"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO tweets
(tweet, username)
VALUES ($1,$2)
RETURNING id, tweet, username, likes, created_at
`

type CreateTweetParams struct {
	Tweet    string `json:"tweet"`
	Username string `json:"username"`
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweets, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.Tweet, arg.Username)
	var i Tweets
	err := row.Scan(
		&i.ID,
		&i.Tweet,
		&i.Username,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const decrementLike = `-- name: DecrementLike :one
UPDATE tweets SET
likes = likes - 1
WHERE id = $1
RETURNING id, tweet, username, likes, created_at
`

func (q *Queries) DecrementLike(ctx context.Context, id int64) (Tweets, error) {
	row := q.db.QueryRowContext(ctx, decrementLike, id)
	var i Tweets
	err := row.Scan(
		&i.ID,
		&i.Tweet,
		&i.Username,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM tweets
WHERE id = $1
`

func (q *Queries) DeleteTweet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTweet, id)
	return err
}

const getListTweets = `-- name: GetListTweets :many
SELECT id, tweet, username, likes, created_at FROM tweets
WHERE username = $1
ORDER BY id DESC
LIMIT $2 OFFSET $3
`

type GetListTweetsParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetListTweets(ctx context.Context, arg GetListTweetsParams) ([]Tweets, error) {
	rows, err := q.db.QueryContext(ctx, getListTweets, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tweets{}
	for rows.Next() {
		var i Tweets
		if err := rows.Scan(
			&i.ID,
			&i.Tweet,
			&i.Username,
			&i.Likes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweet = `-- name: GetTweet :one
SELECT id, tweet, username, likes, created_at FROM tweets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTweet(ctx context.Context, id int64) (Tweets, error) {
	row := q.db.QueryRowContext(ctx, getTweet, id)
	var i Tweets
	err := row.Scan(
		&i.ID,
		&i.Tweet,
		&i.Username,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const incrementLike = `-- name: IncrementLike :one
UPDATE tweets SET
likes = likes + 1
WHERE id = $1
RETURNING id, tweet, username, likes, created_at
`

func (q *Queries) IncrementLike(ctx context.Context, id int64) (Tweets, error) {
	row := q.db.QueryRowContext(ctx, incrementLike, id)
	var i Tweets
	err := row.Scan(
		&i.ID,
		&i.Tweet,
		&i.Username,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}
