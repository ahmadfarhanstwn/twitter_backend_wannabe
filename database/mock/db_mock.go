// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahmadfarhanstwn/twitter_wannabe/database/sqlc (interfaces: Transaction)

// Package dbmock is a generated GoMock package.
package dbmock

import (
	context "context"
	reflect "reflect"

	database "github.com/ahmadfarhanstwn/twitter_wannabe/database/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CreateLikeRelation mocks base method.
func (m *MockTransaction) CreateLikeRelation(arg0 context.Context, arg1 database.CreateLikeRelationParams) (database.LikeRelations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLikeRelation", arg0, arg1)
	ret0, _ := ret[0].(database.LikeRelations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLikeRelation indicates an expected call of CreateLikeRelation.
func (mr *MockTransactionMockRecorder) CreateLikeRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLikeRelation", reflect.TypeOf((*MockTransaction)(nil).CreateLikeRelation), arg0, arg1)
}

// CreateRelations mocks base method.
func (m *MockTransaction) CreateRelations(arg0 context.Context, arg1 database.CreateRelationsParams) (database.Relations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelations", arg0, arg1)
	ret0, _ := ret[0].(database.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelations indicates an expected call of CreateRelations.
func (mr *MockTransactionMockRecorder) CreateRelations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelations", reflect.TypeOf((*MockTransaction)(nil).CreateRelations), arg0, arg1)
}

// CreateTweet mocks base method.
func (m *MockTransaction) CreateTweet(arg0 context.Context, arg1 database.CreateTweetParams) (database.Tweets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", arg0, arg1)
	ret0, _ := ret[0].(database.Tweets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTransactionMockRecorder) CreateTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTransaction)(nil).CreateTweet), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockTransaction) CreateUser(arg0 context.Context, arg1 database.CreateUserParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransaction)(nil).CreateUser), arg0, arg1)
}

// DecrementFollower mocks base method.
func (m *MockTransaction) DecrementFollower(arg0 context.Context, arg1 string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementFollower", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementFollower indicates an expected call of DecrementFollower.
func (mr *MockTransactionMockRecorder) DecrementFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementFollower", reflect.TypeOf((*MockTransaction)(nil).DecrementFollower), arg0, arg1)
}

// DecrementFollowing mocks base method.
func (m *MockTransaction) DecrementFollowing(arg0 context.Context, arg1 string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementFollowing", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementFollowing indicates an expected call of DecrementFollowing.
func (mr *MockTransactionMockRecorder) DecrementFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementFollowing", reflect.TypeOf((*MockTransaction)(nil).DecrementFollowing), arg0, arg1)
}

// DecrementLike mocks base method.
func (m *MockTransaction) DecrementLike(arg0 context.Context, arg1 int64) (database.Tweets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementLike", arg0, arg1)
	ret0, _ := ret[0].(database.Tweets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementLike indicates an expected call of DecrementLike.
func (mr *MockTransactionMockRecorder) DecrementLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementLike", reflect.TypeOf((*MockTransaction)(nil).DecrementLike), arg0, arg1)
}

// DeleteLikeRelation mocks base method.
func (m *MockTransaction) DeleteLikeRelation(arg0 context.Context, arg1 database.DeleteLikeRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeRelation indicates an expected call of DeleteLikeRelation.
func (mr *MockTransactionMockRecorder) DeleteLikeRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeRelation", reflect.TypeOf((*MockTransaction)(nil).DeleteLikeRelation), arg0, arg1)
}

// DeleteRelation mocks base method.
func (m *MockTransaction) DeleteRelation(arg0 context.Context, arg1 database.DeleteRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelation indicates an expected call of DeleteRelation.
func (mr *MockTransactionMockRecorder) DeleteRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelation", reflect.TypeOf((*MockTransaction)(nil).DeleteRelation), arg0, arg1)
}

// DeleteTweet mocks base method.
func (m *MockTransaction) DeleteTweet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockTransactionMockRecorder) DeleteTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockTransaction)(nil).DeleteTweet), arg0, arg1)
}

// FollowTx mocks base method.
func (m *MockTransaction) FollowTx(arg0 context.Context, arg1 database.FollowInputArgs) (database.FollowInputResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowTx", arg0, arg1)
	ret0, _ := ret[0].(database.FollowInputResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowTx indicates an expected call of FollowTx.
func (mr *MockTransactionMockRecorder) FollowTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowTx", reflect.TypeOf((*MockTransaction)(nil).FollowTx), arg0, arg1)
}

// GetFollower mocks base method.
func (m *MockTransaction) GetFollower(arg0 context.Context, arg1 database.GetFollowerParams) ([]database.Relations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollower", arg0, arg1)
	ret0, _ := ret[0].([]database.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollower indicates an expected call of GetFollower.
func (mr *MockTransactionMockRecorder) GetFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollower", reflect.TypeOf((*MockTransaction)(nil).GetFollower), arg0, arg1)
}

// GetFollowing mocks base method.
func (m *MockTransaction) GetFollowing(arg0 context.Context, arg1 database.GetFollowingParams) ([]database.Relations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowing", arg0, arg1)
	ret0, _ := ret[0].([]database.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowing indicates an expected call of GetFollowing.
func (mr *MockTransactionMockRecorder) GetFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowing", reflect.TypeOf((*MockTransaction)(nil).GetFollowing), arg0, arg1)
}

// GetLikeRelation mocks base method.
func (m *MockTransaction) GetLikeRelation(arg0 context.Context, arg1 database.GetLikeRelationParams) (database.LikeRelations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeRelation", arg0, arg1)
	ret0, _ := ret[0].(database.LikeRelations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeRelation indicates an expected call of GetLikeRelation.
func (mr *MockTransactionMockRecorder) GetLikeRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeRelation", reflect.TypeOf((*MockTransaction)(nil).GetLikeRelation), arg0, arg1)
}

// GetListTweets mocks base method.
func (m *MockTransaction) GetListTweets(arg0 context.Context, arg1 database.GetListTweetsParams) ([]database.Tweets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTweets", arg0, arg1)
	ret0, _ := ret[0].([]database.Tweets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTweets indicates an expected call of GetListTweets.
func (mr *MockTransactionMockRecorder) GetListTweets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTweets", reflect.TypeOf((*MockTransaction)(nil).GetListTweets), arg0, arg1)
}

// GetRelations mocks base method.
func (m *MockTransaction) GetRelations(arg0 context.Context, arg1 database.GetRelationsParams) (database.Relations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelations", arg0, arg1)
	ret0, _ := ret[0].(database.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelations indicates an expected call of GetRelations.
func (mr *MockTransactionMockRecorder) GetRelations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelations", reflect.TypeOf((*MockTransaction)(nil).GetRelations), arg0, arg1)
}

// GetTweet mocks base method.
func (m *MockTransaction) GetTweet(arg0 context.Context, arg1 int64) (database.Tweets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweet", arg0, arg1)
	ret0, _ := ret[0].(database.Tweets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweet indicates an expected call of GetTweet.
func (mr *MockTransactionMockRecorder) GetTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweet", reflect.TypeOf((*MockTransaction)(nil).GetTweet), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockTransaction) GetUser(arg0 context.Context, arg1 string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransaction)(nil).GetUser), arg0, arg1)
}

// IncrementFollower mocks base method.
func (m *MockTransaction) IncrementFollower(arg0 context.Context, arg1 string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollower", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementFollower indicates an expected call of IncrementFollower.
func (mr *MockTransactionMockRecorder) IncrementFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollower", reflect.TypeOf((*MockTransaction)(nil).IncrementFollower), arg0, arg1)
}

// IncrementFollowing mocks base method.
func (m *MockTransaction) IncrementFollowing(arg0 context.Context, arg1 string) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollowing", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementFollowing indicates an expected call of IncrementFollowing.
func (mr *MockTransactionMockRecorder) IncrementFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollowing", reflect.TypeOf((*MockTransaction)(nil).IncrementFollowing), arg0, arg1)
}

// IncrementLike mocks base method.
func (m *MockTransaction) IncrementLike(arg0 context.Context, arg1 int64) (database.Tweets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementLike", arg0, arg1)
	ret0, _ := ret[0].(database.Tweets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementLike indicates an expected call of IncrementLike.
func (mr *MockTransactionMockRecorder) IncrementLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementLike", reflect.TypeOf((*MockTransaction)(nil).IncrementLike), arg0, arg1)
}

// LikeTweetTx mocks base method.
func (m *MockTransaction) LikeTweetTx(arg0 context.Context, arg1 database.CreateLikeRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeTweetTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeTweetTx indicates an expected call of LikeTweetTx.
func (mr *MockTransactionMockRecorder) LikeTweetTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTweetTx", reflect.TypeOf((*MockTransaction)(nil).LikeTweetTx), arg0, arg1)
}

// UnfollowTx mocks base method.
func (m *MockTransaction) UnfollowTx(arg0 context.Context, arg1 database.FollowInputArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowTx indicates an expected call of UnfollowTx.
func (mr *MockTransactionMockRecorder) UnfollowTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowTx", reflect.TypeOf((*MockTransaction)(nil).UnfollowTx), arg0, arg1)
}

// UnlikeTweetTx mocks base method.
func (m *MockTransaction) UnlikeTweetTx(arg0 context.Context, arg1 database.DeleteLikeRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeTweetTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeTweetTx indicates an expected call of UnlikeTweetTx.
func (mr *MockTransactionMockRecorder) UnlikeTweetTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeTweetTx", reflect.TypeOf((*MockTransaction)(nil).UnlikeTweetTx), arg0, arg1)
}

// UpdateEmail mocks base method.
func (m *MockTransaction) UpdateEmail(arg0 context.Context, arg1 database.UpdateEmailParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockTransactionMockRecorder) UpdateEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockTransaction)(nil).UpdateEmail), arg0, arg1)
}

// UpdateName mocks base method.
func (m *MockTransaction) UpdateName(arg0 context.Context, arg1 database.UpdateNameParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockTransactionMockRecorder) UpdateName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockTransaction)(nil).UpdateName), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockTransaction) UpdatePassword(arg0 context.Context, arg1 database.UpdatePasswordParams) (database.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(database.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockTransactionMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockTransaction)(nil).UpdatePassword), arg0, arg1)
}
